@model Guid

@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div id="privateMessageHistoryModal" class="modal fade" tabindex="-1" role="dialog">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                <h4 class="modal-title">Private messages history</h4>
            </div>
            <div class="modal-body" style="max-height: 50vh; overflow: auto;">
            </div>
        </div>
    </div>
</div>

<div class="row">
    <div class="col-md-4">
        <div class="panel panel-default">
            <div class="panel-heading">People</div>
            <div class="panel-body users-info-container" id="usersInfoContainer">
            </div>
        </div>
    </div>
    <div class="col-md-8">
        <div class="panel panel-default">
            <div class="panel-heading">Messages</div>
            <div class="panel-body messages-log-container" id="messagesLogContainer">
            </div>
        </div>
    </div>
</div>
<div class="row" id="privateMessaging" style="display: none;">
    <div class="col-md-12">
        Private message for <strong id="privateClient">ironballz</strong>.
        <a href="" id="disablePrivateLink">Disable private messaging.</a>
    </div>
</div>
<div class="row">
    <div class="col-md-9">
        <input type="text" id="messageInput" class="form-control message-input" />
        <div id="messageInputValidation" class="text-danger"></div>
    </div>
    <div class="col-md-3">
        <button type="button" id="sendButton" class="btn btn-primary btn-block send-button"><span class="glyphicon glyphicon-send"></span>&nbsp;Send</button>
    </div>
</div>

<script src="~/Scripts/messaging.js"></script>

<script>
    var clientId = "@Model";
    var chatWebSocket;

    $(document).ready(function () {
        app.messaging.setProlongSessionLifetimeUrl("@Url.Action("ProlongSessionLifetime", "Chat")");
        app.messaging.handleIdleTime(@Session.Timeout, function () {
            $("#signOutLink").trigger("click");
        });

        chatWebSocket = new WebSocket("ws://" + window.location.hostname + "@Url.Action("WebSocketHandler", "Chat")" + "?clientId=" + clientId);

        chatWebSocket.onopen = function () {
            app.messaging.updateUserStatusOnJoin(chatWebSocket);

            $.get("@Url.Action("GetUsersInfo", "Chat")", { clientId: clientId }, function (data) {
                for (var i = 0; i < data.length; i++) {
                    $("#usersInfoContainer").append(app.messaging.getUserMarkup(data[i], true));
                }
            });

            $.get("@Url.Action("GetMessages", "Chat")", { clientId: clientId }, function (data) {
                for (var i = 0; i < data.length; i++) {
                    $("#messagesLogContainer").append(app.messaging.getMessageMarkup(data[i]));
                }
            });
        };

        chatWebSocket.onmessage = function (e) {
            var data = JSON.parse(e.data);
            switch (data.Type) {
                case app.messaging.webSocketMessageType.JOIN:
                    var $userItem = $("div[data-user-id=" + data.ClientId + "]");
                    if($userItem.length){
                        $userItem.replaceWith(app.messaging.getUserMarkup(data.UserInfo, true));
                    }
                    else if(data.ClientId != clientId){
                        $("#usersInfoContainer").append(app.messaging.getUserMarkup(data.UserInfo, true));
                    }
                    $("#messagesLogContainer").append($("<div></div>").addClass("row system-message text-primary").append(data.UserInfo.Login + " has joined the chat."));
                    $("#messagesLogContainer").animate({ scrollTop: $("#messagesLogContainer").prop("scrollHeight") }, 500);
                    break;
                case app.messaging.webSocketMessageType.LEAVE:
                    $("div[data-user-id=" + data.ClientId + "]").replaceWith(app.messaging.getUserMarkup(data.UserInfo, true));
                    $("#messagesLogContainer").append($("<div></div>").addClass("row system-message text-primary").append(data.UserInfo.Login + " has left the chat."));
                    $("#messagesLogContainer").animate({ scrollTop: $("#messagesLogContainer").prop("scrollHeight") }, 500);
                    break;
                case app.messaging.webSocketMessageType.MESSAGE:
                    if (data.PostedMessage.ModifiedDate) {
                        $("div[data-message-id=" + data.PostedMessage.Id + "]").replaceWith(app.messaging.getMessageMarkup(data.PostedMessage));
                    }
                    else {
                        $("#messagesLogContainer").append(app.messaging.getMessageMarkup(data.PostedMessage));
                        $("#messagesLogContainer").animate({ scrollTop: $("#messagesLogContainer").prop("scrollHeight") }, 500);
                    }
                    break;
            }
        };

        function validatePostedMessage() {
            var isValid = true;
            $("#messageInputValidation").text("");
            var messageContent = $("#messageInput").val().trim();
            if (messageContent.length == 0) {
                isValid = false;
                $("#messageInputValidation").text("You can't post empty message.");
            }
            else if (messageContent.length > 254) {
                isValid = false;
                $("#messageInputValidation").text("Posted message must be shorter than 254 characters.")
            }
            return isValid;
        }

        $("#sendButton").click(function () {
            var isValid = validatePostedMessage();
            if (isValid) {
                app.messaging.sendPostedMessage(chatWebSocket, $("#messageInput"));
            }
        });

        $("#messageInput").keypress(function (e) {
            var keyCode = (e.keyCode ? e.keyCode : e.which);
            if (keyCode == 13) {
                var isValid = validatePostedMessage();
                if (isValid) {
                    app.messaging.sendPostedMessage(chatWebSocket, $("#messageInput"));
                }
            }
        });

        $("#disablePrivateLink").click(function (e) {
            e.preventDefault();
            app.messaging.setPostedMessageParams(null, null, false);
            $("#privateClient").text("");
            $("#privateMessaging").hide();
        });

        $("#signOutLink").click(function (e) {
            e.preventDefault();
            app.messaging.updateUserStatusOnLeave(chatWebSocket);
            chatWebSocket.close();
            window.location = $("#signOutLink").attr('href');
        });
    });

    app.messaging.onShowPrivateMessageHistory(function(userData){
        $.get("@Url.Action("GetPrivateMessagesHistory", "Chat")",
            { clientId: clientId, receiverId: userData.Id },
            function(messages){
                $("#privateMessageHistoryModal .modal-body").html("");
                $("#privateMessageHistoryModal .modal-title").text("Private conversation with \"" + userData.Login + "\".");
                if(messages.length){
                    for (var i = 0; i < messages.length; i++) {
                        $("#privateMessageHistoryModal .modal-body").append(app.messaging.getMessageMarkup(messages[i]));
                    }
                }
                else{
                    $("#privateMessageHistoryModal .modal-body").text("You haven't sent any messages to this user.");
                }
                $("#privateMessageHistoryModal").modal();
            });
    });

    app.messaging.onEnablePrivateMessaging(function (userData) {
        app.messaging.setPostedMessageParams(null, userData.Id, false);
        $("#privateClient").text(userData.Login);
        $("#privateMessaging").show();
    });

    app.messaging.onEditPostedMessage(function (messageData) {
        app.messaging.setPostedMessageParams(messageData.Id, null, false);
        $("#messageInput").val(messageData.Content);
    });

    app.messaging.onDeletePostedMessage(function (messageData) {
        app.messaging.setPostedMessageParams(messageData.Id, null, true);
        app.messaging.sendPostedMessage(chatWebSocket, $("#messageInput"));
    });
</script>
